{"version":3,"sources":["Cell.js","Board.js","Game.js","index.js"],"names":["Cell","props","value","onDivClicked","react_default","a","createElement","className","onClick","Board","_this$props","this","cells","onCellClicked","map","cell","index","src_Cell","key","renderCells","React","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","_this$state","state","whoNext","stepCounter","winner","toConsumableArray","_winLines$filter","filter","combo","_combo","slicedToArray","b","c","winCombo","getWinner","setState","resetGame","Array","fill","_this$state2","renderGameStatus","src_Board","renderResetButton","rootElement","document","getElementById","ReactDOM","render","src_Game"],"mappings":"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","file":"static/js/main.67179542.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Cell(props) {\n  const { value, onDivClicked } = props;\n    if (value == \"X\") {\n      return (<div className=\"board-cell board-cell--x\" onClick={onDivClicked}></div>)\n    } else if (value == \"0\") {\n      return (<div className=\"board-cell board-cell--0\" onClick={onDivClicked}></div>)\n    } else {\n      return(<div className=\"board-cell\" onClick={onDivClicked}>{value}</div>)\n    }\n}\n\nexport default Cell;\n","import React from \"react\";\nimport Cell from \"./Cell\";\n\nclass Board extends React.Component {\n  renderCells() {\n    const { cells, onCellClicked } = this.props;\n    return cells.map((cell, index) => {\n      return (\n        <Cell\n          value={cell}\n          key={\"cell-\" + index}\n          onDivClicked={() => {\n            onCellClicked(index);\n          }}\n        />\n      );\n    });\n  }\n\n  render() {\n    return <div className=\"board\">{this.renderCells()}</div>;\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./styles.css\";\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      cells: Array(9).fill(null),\n      stepCounter: 1,\n      whoNext: \"X\",\n      winner: null\n    };\n  }\n\n  handleClick = index => {\n    let { cells, whoNext, stepCounter, winner } = this.state;\n    cells = [...cells];\n    if (cells[index] || winner) {\n      return;\n    }\n    cells[index] = whoNext;\n    whoNext = whoNext === \"X\" ? \"0\" : \"X\";\n    stepCounter = stepCounter + 1;\n    winner = getWinner(cells);\n    this.setState({\n      cells,\n      whoNext,\n      stepCounter,\n      winner\n    });\n  };\n\n  resetGame = () => {\n    this.setState({\n      cells: Array(9).fill(null),\n      stepCounter: 1,\n      whoNext: \"X\",\n      winner: null\n    });\n  };\n\n  renderResetButton(winner, stepCounter) {\n    if (winner || stepCounter === 10) {\n      return <button className=\"btn\" onClick={this.resetGame}>New game!</button>;\n    }\n  }\n\n  renderGameStatus(winner, stepCounter, whoNext) {\n    // let gameStatus;\n    if (winner) {\n      // gameStatus = `Player ${winner} wins!`;\n      return (<h2>Player <span className=\"winner\">{winner}</span> wins!</h2> )\n    } else if (stepCounter === 10) {\n      // gameStatus = \"It is a DRAW!\";\n      return (<h2>It is a DRAW!</h2>)\n    } else {\n      // gameStatus = `Player ${whoNext}, your turn!`;\n      return (<h2>Player <span className=\"whoNext\">{whoNext}</span>, your turn!!</h2>)\n    }\n  }\n\n  render() {\n    const { cells, whoNext, winner, stepCounter } = this.state;\n    // let gameStatus;\n    // if (winner) {\n    //   gameStatus = `Player ${winner} wins!`;\n    // } else if (stepCounter === 10) {\n    //   gameStatus = \"It is a DRAW!\";\n    // } else {\n    //   gameStatus = `Player ${whoNext}, your turn!`;\n    // }\n    \n    return (\n      <div className=\"Game\">\n        <h1>Tic Tac Toe</h1>\n        <h3>step: {stepCounter}</h3>\n        {this.renderGameStatus(winner, stepCounter, whoNext)}\n        <Board cells={cells} onCellClicked={this.handleClick} />\n        {this.renderResetButton(winner, stepCounter)}\n      </div>\n    );\n  }\n}\n\nfunction getWinner(cells) {\n  const winLines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [8, 4, 0],\n    [2, 4, 6]\n  ];\n\n  const [winCombo] = winLines.filter(combo => {\n    let [a, b, c] = combo;\n    return cells[a] && cells[a] === cells[b] && cells[b] === cells[c];\n  });\n\n  if (winCombo) {\n    return cells[winCombo[0]];\n  } else {\n    return null;\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./Game\";\n\nimport \"./styles.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Game />, rootElement);\n"],"sourceRoot":""}